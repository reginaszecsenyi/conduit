{"uid":"c7f93c90002d4ef9","name":"test_all_pages","fullName":"test.test_conduit.TestConduit#test_all_pages","historyId":"95188e4467b6822bf64f0fbc4c52176b","time":{"start":1681308262444,"stop":1681308264896,"duration":2452},"status":"failed","statusMessage":"AssertionError: assert 2 == 3\n +  where 2 = len([<selenium.webdriver.remote.webelement.WebElement (session=\"9ee885e24c65764cca395bc0485cc61a\", element=\"bdf996d2-7039-...te.webelement.WebElement (session=\"9ee885e24c65764cca395bc0485cc61a\", element=\"57c0e7d0-1544-4dc4-92e5-7618162a5b47\")>])","statusTrace":"self = <test_conduit.TestConduit object at 0x7f9b14cf6f20>\n\n    def test_all_pages(self):\n    \n        login(self.browser)\n    \n        # Megkeresem a lapozó gombok webelementjeit, és for ciklus segítségével végiterálok rajta\n    \n        page_links = self.browser.find_elements(By.CSS_SELECTOR, 'a[class =\"page-link\"]')\n    \n        # Felveszek egy oldal számlálót, amit minden iterációban növelek egyel, és összehasonlítom, hogy a száma megegyezik-e az aktuális lapozó gombon található oldalszámmal\n    \n        page_counter = 1\n        for link in page_links:\n            link.click()\n            assert int(link.text) == page_counter\n            page_counter += 1\n    \n        # Összehasonlítom hogy a lapozó gombok listájának hossza megegyezik-e a számlálóval (kivonok 1-et belőle, hiszen az utolsó iteráció végén is hozzáadott még egyet)\n    \n>       assert len(page_links) == page_counter\nE       assert 2 == 3\nE        +  where 2 = len([<selenium.webdriver.remote.webelement.WebElement (session=\"9ee885e24c65764cca395bc0485cc61a\", element=\"bdf996d2-7039-...te.webelement.WebElement (session=\"9ee885e24c65764cca395bc0485cc61a\", element=\"57c0e7d0-1544-4dc4-92e5-7618162a5b47\")>])\n\ntest/test_conduit.py:165: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681308261155,"stop":1681308262444,"duration":1289},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681308264907,"stop":1681308264965,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az255-425"},{"name":"thread","value":"3042-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"c7f93c90002d4ef9.json","parameterValues":[]}